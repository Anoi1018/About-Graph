在一个小镇里，按从 1 到 N 标记了 N 个人。传言称，这些人中有一个是小镇上的秘密法官。

如果小镇的法官真的存在，那么：
小镇的法官不相信任何人。
每个人（除了小镇法官外）都信任小镇的法官。
只有一个人同时满足属性 1 和属性 2 。

给定数组 trust ，该数组由信任对 trust[i] = [a, b] 组成，表示标记为 a 的人信任标记为 b 的人。
如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的标记。否则，返回 -1 。

示例 1：
输入：N = 3, trust = [[1,3],[2,3]]
输出：3

示例 2：
输入：N = 3, trust = [[1,3],[2,3],[3,1]]
输出：-1

示例 3：
输入：N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
输出：3

提示：
1 <= N <= 1000
trust.length <= 10000
trust[i] 是完全不同的
trust[i][0] != trust[i][1]
1 <= trust[i][0], trust[i][1] <= N

代码示意：
一、map标记的方法

var findJudge = function(N, trust) {
    if(N===1 && trust.length===0) return 1;
    let arr1=[],arr2=[],map = new Map();
    trust.forEach((arr)=>{
        arr1.push(arr[0]);
        arr2.push(arr[1]);
    })
    arr1.forEach((element)=>{
        if(map.has(element)) map.set(element,map.get(element)+1)
        else map.set(element,1)
    })
    arr2.forEach((element)=>{
        if(map.has(element)) map.set(element,map.get(element)-1)
        else map.set(element,-1)
    })
    let index;
    map.forEach((value,key)=>{
        if(value === -map.size+1) index = key;
    })
    return index? index : -1;
};

二、用数组实现graph 数组下标对应节点（小镇上的人） 元素为具有出入度两个属性的对象 法官为出度为0 入度为n-1的人
var findJudge = function(N, trust) {
    if(N===1 && trust.length===0) return 1;
    //构造0-N个节点的图 --》用数组表示
    //数组下标表示节点 也就是小镇上的人 数组元素用一个对象表示 对象包括出度和入度两个属性
    //数组有findIndex方法 找出符合内部条件的数组元素的下标
    let graph = Array.from({length:N+1},()=>({outdegree:0,indegree:0})); //注意这里 箭头函数+对象外面有括号（）
    trust.map((arr)=>{
        graph[arr[0]].outdegree++;
        graph[arr[1]].indegree++;
    })
    return graph.findIndex((obj,index)=>{
        return index!==0 && obj.outdegree===0 && obj.indegree === N-1;
    })
};
三、用数组实现graph 数组元素为该数组下标对应节点的出入度的差值 法官为入出度差值为N-1的人
var findJudge = function(N, trust) {
    if(N===1 && trust.length===0) return 1;

    let graph = new Array(N+1).fill(0);
    trust.map(([a,b])=>{
        graph[a]--;
        graph[b]++;
    })
    return graph.findIndex((node,index)=>{
        return index!==0 && node === N-1;
    })
};


