你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。
在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]
给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？

示例 1:
输入: 2, [[1,0]] 
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。

示例 2:
输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。

提示：
输入的先决条件是由 边缘列表 表示的图形，而不是 邻接矩阵
你可以假定输入的先决条件中没有重复的边
1 <= numCourses <= 10^5

解题思路：
事件先后执行顺序--》拓扑排序--》图--》邻接表（map）+入度表（array）--》queue（array） 将入度为0的元素（没有先决条件或先决条件已完成的）加入队列--》出队 表示完成当前任务--》队列null 判断未完成任务数目

我们可以使用 邻接表 来表示有向图中各个节点的依赖关系，同时维护一个入度表，则入度表中入度为 0 的节点所表示的课程是可以立即开始学习的（没有先决条件条件或先觉条件已完成）
那么这题就很简单了:
创建一个队列，并将临接表中所有入度为 0 的节点放入队列中
若队列非空，则从队列中出队第一个节点，numCourse — （学习该课程），然后将将依赖该课程所有临接节点的入度减 1
若减 1 后节点入度为 0，则该课程又是可立即学习课程，将该节点添加到队尾
若减 1 后节点入度不为 0 ，则继续遍历下一节点
当队列为空，检查 numCourses === 0 （所有课程是否全部学习结束）即可

代码示意：
时间复杂度：O（V+E） 空间复杂度：O（V+E）
var canFinish = function(numCourses, prerequisites) {
    if(prerequisites.length===0) return true;
    //初始化用到的三个数据结构 邻接表 入度表 队列
    //邻接表 表示节点间的依赖关系 入度表表示当前任务是否还有先决任务，下标是任务，元素是先决任务数目 （入度）
    //队列实现节点和边的遍历 按照入度为0的节点的出队顺序 模拟执行各个任务的顺序
    let adjList = new Map(),inDegree = new Array(numCourses).fill(0),queue=[];
    prerequisites.map(([a,b])=>{
        inDegree[a]++;
        if(!adjList.has(b)) adjList.set(b,[]);
        adjList.get(b).push(a);
    })
    inDegree.map((n,index)=>{
        if(n===0) queue.push(index);
    });
    while(queue.length){
        let v = queue.shift();
        numCourses--;
        //!!!注意不在邻接表中的元素 即为没有任何依赖的节点 直接出队 没有节点数组可以遍历
        if(!adjList.has(v)) continue;
        for(let vNode of adjList.get(v)){//将依赖当前出队节点的 所有节点的入度减1 表示一个先决条件已完成
        //如果遍历到的这个节点入度为0 则可以入队等待执行
            if(--inDegree[vNode]===0) queue.push(vNode);   
        }
    }
    //队列为空 遍历完所有节点和边 未完成的任务数目是否为0？
    return numCourses === 0;
};
