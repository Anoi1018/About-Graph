给你一个正整数 n ，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。

示例 1：
输入：n = 3
输出：[[1,2,3],[8,9,4],[7,6,5]]

示例 2：
输入：n = 1
输出：[[1]]
 
提示：
1 <= n <= 20

代码示意：
一、模拟+顺时针转圈 放置元素
时间复杂度：O（n^2） 空间复杂度：O（n^2） 用于返回结果的二维矩阵
var generateMatrix = function(n) {
    if(n===1) return [[1]];
    let matrix = new Array(n).fill(0).map(()=>new Array(n).fill(0));//初始化二维矩阵 可以类比螺旋矩阵中的visited
    let directions = [[0,1],[1,0],[0,-1],[-1,0]];
    let row =0,col=0,directionsIndex = 0,count=1,total = n*n,nextCol,nextRow;
    while(count<=total){
        matrix[row][col] = count++; //用count实现放置元素1~n^2
        nextRow = row + directions[directionsIndex][0];
        nextCol = col + directions[directionsIndex][1];
        if(nextRow <0 || nextRow>=n || nextCol<0 || nextCol>=n || matrix[nextRow][nextCol]){
            directionsIndex = (++directionsIndex) % 4;
        }
        row += directions[directionsIndex][0];
        col += directions[directionsIndex][1];
    }
    return matrix;
};
二、模拟+分圈顺时针 放置元素
var generateMatrix = function(n) {
    if(n===1) return [[1]];
    let matrix = new Array(n).fill(0).map(()=>new Array(n).fill(0));
    let left = 0,right = n-1, top = 0, bottom = n-1,row=0,col=0,count = 1;
    while(left<=right && top<=bottom ){
        for(col = left;col<=right;col++){
            matrix[top][col] = count++;
        }
        for(row = top+1;row<=bottom;row++){
            matrix[row][right] = count++;
        }
        if(left < right){ //去重
            for(col=right-1;col>left;col--){
                matrix[bottom][col] = count++;
            }
        }
        if(top<bottom){ //去重
             for(row=bottom;row>top;row--){
                matrix[row][left] = count++;
            }
        }
         left++;right--;top++;bottom--;
    }
    return matrix;
};
